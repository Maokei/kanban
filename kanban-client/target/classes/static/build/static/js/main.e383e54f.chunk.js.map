{"version":3,"sources":["components/Project/ProjectItem.js","components/Dashboard.js","components/Layout/Header.js","App.js","serviceWorker.js","index.js"],"names":["ProjectItem","className","href","Component","Dashboard","Header","type","data-toggle","data-target","id","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2QAyCeA,E,iLArCP,OACI,yBAAKC,UAAU,aACX,yBAAKA,UAAU,gCACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,SACX,0BAAMA,UAAU,WAAhB,UAEJ,yBAAKA,UAAU,2BACX,sDACA,2FAEJ,yBAAKA,UAAU,8BACX,wBAAIA,UAAU,cACV,uBAAGC,KAAK,KACJ,wBAAID,UAAU,yBACV,uBAAGA,UAAU,6BAAb,qBAGR,uBAAGC,KAAK,KACJ,wBAAID,UAAU,0BACV,uBAAGA,UAAU,mBAAb,0BAGR,uBAAGC,KAAK,IACJ,wBAAID,UAAU,0BACV,uBAAGA,UAAU,2BAAb,8B,GA3BdE,aCwBXC,E,iLArBP,OACI,yBAAKH,UAAU,YACf,yBAAKA,UAAU,aACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,aACX,wBAAIA,UAAU,yBAAd,YACA,6BACA,uBAAGC,KAAK,mBAAmBD,UAAU,uBAArC,oBAGA,6BACA,6BACA,kBAAC,EAAD,c,GAdAE,aCuCTE,E,iLAtCP,OACI,yBAAKJ,UAAU,uDACnB,yBAAKA,UAAU,aACX,uBAAGA,UAAU,eAAeC,KAAK,kBAAjC,oCAGA,4BAAQD,UAAU,iBAAiBK,KAAK,SAASC,cAAY,WAAWC,cAAY,eAChF,0BAAMP,UAAU,yBAGpB,yBAAKA,UAAU,2BAA2BQ,GAAG,cACzC,wBAAIR,UAAU,sBACV,wBAAIA,UAAU,YACV,uBAAGA,UAAU,WAAWC,KAAK,cAA7B,eAMR,wBAAID,UAAU,sBACV,wBAAIA,UAAU,YACV,uBAAGA,UAAU,YAAYC,KAAK,iBAA9B,YAIJ,wBAAID,UAAU,YACV,uBAAGA,UAAU,WAAWC,KAAK,cAA7B,kB,GA5BHC,a,MCaNO,MATf,WACE,OACE,yBAAKT,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,QCEcU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,gB","file":"static/js/main.e383e54f.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass ProjectItem extends Component {\n    render() {\n        return (\n            <div className=\"container\">\n                <div className=\"card card-body bg-light mb-3\">\n                    <div className=\"row\">\n                        <div className=\"col-2\">\n                            <span className=\"mx-auto\">REACT</span>\n                        </div>\n                        <div className=\"col-lg-6 col-md-4 col-8\">\n                            <h3>Spring / React Project</h3>\n                            <p>Project to create a Kanban Board with Spring Boot and React</p>\n                        </div>\n                        <div className=\"col-md-4 d-none d-lg-block\">\n                            <ul className=\"list-group\">\n                                <a href=\"#\">\n                                    <li className=\"list-group-item board\">\n                                        <i className=\"fa fa-flag-checkered pr-1\"> Project Board </i>\n                                    </li>\n                                </a>\n                                <a href=\"#\">\n                                    <li className=\"list-group-item update\">\n                                        <i className=\"fa fa-edit pr-1\"> Update Project Info</i>\n                                    </li>\n                                </a>\n                                <a href=\"\">\n                                    <li className=\"list-group-item delete\">\n                                        <i className=\"fa fa-minus-circle pr-1\"> Delete Project</i>\n                                    </li>\n                                </a>\n                            </ul>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default ProjectItem;","import React, { Component } from 'react';\nimport ProjectItem from './Project/ProjectItem';\n\nclass Dashboard extends Component {\n    render() {\n        return (\n            <div className=\"projects\">\n            <div className=\"container\">\n                <div className=\"row\">\n                    <div className=\"col-md-12\">\n                        <h1 className=\"display-4 text-center\">Projects</h1>\n                        <br />\n                        <a href=\"ProjectForm.html\" className=\"btn btn-lg btn-info\">\n                            Create a Project\n                        </a>\n                        <br />\n                        <hr />\n                        <ProjectItem />\n                    </div>\n                </div>\n            </div>\n        </div>\n        );\n    }\n}\n\nexport default Dashboard;","import React, { Component } from 'react';\n\nclass Header extends Component {\n    render() {\n        return (\n            <nav className=\"navbar navbar-expand-sm navbar-dark bg-primary mb-4\">\n        <div className=\"container\">\n            <a className=\"navbar-brand\" href=\"Dashboard.html\">\n                Personal Project Management Tool\n            </a>\n            <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#mobile-nav\">\n                <span className=\"navbar-toggler-icon\" />\n            </button>\n\n            <div className=\"collapse navbar-collapse\" id=\"mobile-nav\">\n                <ul className=\"navbar-nav mr-auto\">\n                    <li className=\"nav-item\">\n                        <a className=\"nav-link\" href=\"/dashboard\">\n                            Dashboard\n                        </a>\n                    </li>\n                </ul>\n\n                <ul className=\"navbar-nav ml-auto\">\n                    <li className=\"nav-item\">\n                        <a className=\"nav-link \" href=\"register.html\">\n                            Sign Up\n                        </a>\n                    </li>\n                    <li className=\"nav-item\">\n                        <a className=\"nav-link\" href=\"login.html\">\n                            Login\n                        </a>\n                    </li>\n                </ul>\n            </div>\n        </div>\n    </nav>\n        );\n    }\n}\n\nexport default Header;","import React from 'react';\nimport './App.css';\nimport Dashboard from './components/Dashboard';\nimport Header from './components/Layout/Header';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Dashboard />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}